-- 1. Simple User Wallet Table
CREATE TABLE "UserWallet" (
  "wallet_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" int NOT NULL UNIQUE,
  "balance" decimal(10,2) NOT NULL DEFAULT 0.00,
  "created_at" timestamp DEFAULT (now()),
  "updated_at" timestamp DEFAULT (now()),
  CONSTRAINT check_positive_balance CHECK (balance >= 0)
);

-- 2. Wallet Transaction Table
CREATE TABLE "WalletTransaction" (
  "transaction_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "wallet_id" int NOT NULL,
  "transaction_type" varchar(10) NOT NULL, -- 'credit', 'debit'
  "transaction_category" varchar(20) NOT NULL, -- 'topup', 'purchase', 'refund'
  "amount" decimal(10,2) NOT NULL,
  "balance_before" decimal(10,2) NOT NULL,
  "balance_after" decimal(10,2) NOT NULL,
  "reference_type" varchar(20), -- 'order', 'return_request', 'topup'
  "reference_id" int, -- order_id, return_id, etc.
  "bkash_transaction_id" varchar(100), -- bKash transaction ID for topups
  "description" text,
  "status" varchar(20) DEFAULT 'completed', -- 'pending', 'completed', 'failed'
  "created_at" timestamp DEFAULT (now()),
  CONSTRAINT check_positive_amount CHECK (amount > 0),
  CONSTRAINT check_valid_transaction_type CHECK (transaction_type IN ('credit', 'debit')),
  CONSTRAINT check_valid_category CHECK (transaction_category IN ('topup', 'purchase', 'refund')),
  CONSTRAINT check_valid_status CHECK (status IN ('pending', 'completed', 'failed'))
);

-- 3. Add indexes for better performance
CREATE INDEX idx_wallet_user_id ON "UserWallet" ("user_id");
CREATE INDEX idx_wallet_transaction_wallet_id ON "WalletTransaction" ("wallet_id");
CREATE INDEX idx_wallet_transaction_created_at ON "WalletTransaction" ("created_at");
CREATE INDEX idx_wallet_transaction_reference ON "WalletTransaction" ("reference_type", "reference_id");

-- 4. Add foreign key constraints
ALTER TABLE "UserWallet" ADD FOREIGN KEY ("user_id") REFERENCES "User" ("user_id") ON DELETE CASCADE;
ALTER TABLE "WalletTransaction" ADD FOREIGN KEY ("wallet_id") REFERENCES "UserWallet" ("wallet_id") ON DELETE CASCADE;

-- 5. Trigger to update wallet updated_at timestamp
CREATE OR REPLACE FUNCTION update_wallet_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_wallet_updated_at_trigger
    BEFORE UPDATE ON "UserWallet"
    FOR EACH ROW
    EXECUTE FUNCTION update_wallet_updated_at();

-- 6. Function to safely update wallet balance
CREATE OR REPLACE FUNCTION update_wallet_balance(
    p_wallet_id INT,
    p_amount DECIMAL(10,2),
    p_transaction_type VARCHAR(10),
    p_transaction_category VARCHAR(20),
    p_reference_type VARCHAR(20) DEFAULT NULL,
    p_reference_id INT DEFAULT NULL,
    p_description TEXT DEFAULT NULL,
    p_bkash_transaction_id VARCHAR(100) DEFAULT NULL
)
RETURNS INT AS $$
DECLARE
    v_current_balance DECIMAL(10,2);
    v_new_balance DECIMAL(10,2);
    v_transaction_id INT;
BEGIN
    -- Lock the wallet row to prevent concurrent updates
    SELECT balance INTO v_current_balance
    FROM "UserWallet"
    WHERE wallet_id = p_wallet_id
    FOR UPDATE;
    
    IF NOT FOUND THEN
        RAISE EXCEPTION 'Wallet not found';
    END IF;
    
    -- Calculate new balance
    IF p_transaction_type = 'credit' THEN
        v_new_balance := v_current_balance + p_amount;
    ELSIF p_transaction_type = 'debit' THEN
        v_new_balance := v_current_balance - p_amount;
        IF v_new_balance < 0 THEN
            RAISE EXCEPTION 'Insufficient wallet balance';
        END IF;
    ELSE
        RAISE EXCEPTION 'Invalid transaction type';
    END IF;
    
    -- Update wallet balance
    UPDATE "UserWallet"
    SET balance = v_new_balance,
        updated_at = now()
    WHERE wallet_id = p_wallet_id;
    
    -- Insert transaction record
    INSERT INTO "WalletTransaction" (
        wallet_id, transaction_type, transaction_category, amount,
        balance_before, balance_after, reference_type, reference_id,
        description, bkash_transaction_id
    ) VALUES (
        p_wallet_id, p_transaction_type, p_transaction_category, p_amount,
        v_current_balance, v_new_balance, p_reference_type, p_reference_id,
        p_description, p_bkash_transaction_id
    ) RETURNING transaction_id INTO v_transaction_id;
    
    RETURN v_transaction_id;
END;
$$ LANGUAGE plpgsql;

-- 7. Create wallet automatically when user registers (optional trigger)
CREATE OR REPLACE FUNCTION create_user_wallet()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO "UserWallet" (user_id, balance)
    VALUES (NEW.user_id, 0.00);
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER create_wallet_on_user_registration
    AFTER INSERT ON "User"
    FOR EACH ROW
    EXECUTE FUNCTION create_user_wallet();