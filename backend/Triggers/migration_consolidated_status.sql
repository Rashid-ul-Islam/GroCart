-- MIGRATION SCRIPT: Consolidate OrderStatusHistory and DeliveryStatusTracker into StatusHistory
-- Run this script to migrate existing status tracking data to the new consolidated approach

-- Step 1: Create the consolidated StatusHistory table
CREATE TABLE IF NOT EXISTS "StatusHistory" (
  "status_history_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "entity_type" varchar NOT NULL, -- 'order' or 'delivery'
  "entity_id" int NOT NULL,
  "status" varchar NOT NULL,
  "updated_at" timestamp DEFAULT (now()),
  "updated_by" int,
  "notes" text
);

-- Add foreign key constraint for updated_by
ALTER TABLE "StatusHistory" 
ADD CONSTRAINT fk_status_history_updated_by 
FOREIGN KEY ("updated_by") REFERENCES "User" ("user_id");

-- Step 2: Migrate existing OrderStatusHistory data
INSERT INTO "StatusHistory" (entity_type, entity_id, status, updated_at, updated_by)
SELECT 'order', order_id, status, updated_at, updated_by 
FROM "OrderStatusHistory"
ON CONFLICT DO NOTHING;

-- Step 3: Add current_status column to Order table if it doesn't exist
DO $$ 
BEGIN 
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'Order' AND column_name = 'current_status'
  ) THEN
    ALTER TABLE "Order" ADD COLUMN "current_status" varchar DEFAULT 'pending';
  END IF;
END $$;

-- Step 4: Add current_status column to Delivery table if it doesn't exist
DO $$ 
BEGIN 
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'Delivery' AND column_name = 'current_status'
  ) THEN
    ALTER TABLE "Delivery" ADD COLUMN "current_status" varchar DEFAULT 'assigned';
  END IF;
END $$;

-- Step 5: Create the WarehouseProductRequest table for inter-warehouse requests
CREATE TABLE IF NOT EXISTS "WarehouseProductRequest" (
  "request_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "delivery_id" int NOT NULL,
  "requesting_warehouse_id" int NOT NULL,
  "target_warehouse_id" int NOT NULL,
  "product_id" int NOT NULL,
  "requested_quantity" int NOT NULL,
  "status" varchar DEFAULT 'pending',
  "requested_at" timestamp DEFAULT (now()),
  "fulfilled_at" timestamp,
  "notes" text
);

-- Add foreign key constraints for warehouse product request
ALTER TABLE "WarehouseProductRequest" 
ADD CONSTRAINT fk_warehouse_request_delivery 
FOREIGN KEY ("delivery_id") REFERENCES "Delivery" ("delivery_id");

ALTER TABLE "WarehouseProductRequest" 
ADD CONSTRAINT fk_warehouse_request_requesting 
FOREIGN KEY ("requesting_warehouse_id") REFERENCES "Warehouse" ("warehouse_id");

ALTER TABLE "WarehouseProductRequest" 
ADD CONSTRAINT fk_warehouse_request_target 
FOREIGN KEY ("target_warehouse_id") REFERENCES "Warehouse" ("warehouse_id");

ALTER TABLE "WarehouseProductRequest" 
ADD CONSTRAINT fk_warehouse_request_product 
FOREIGN KEY ("product_id") REFERENCES "Product" ("product_id");

-- Step 6: Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_status_history_entity 
ON "StatusHistory" ("entity_type", "entity_id", "updated_at");

CREATE INDEX IF NOT EXISTS idx_warehouse_request_delivery 
ON "WarehouseProductRequest" ("delivery_id", "status");

-- Step 7: Update current status for existing orders and deliveries
-- Update Order current_status based on latest status in history
UPDATE "Order" 
SET current_status = (
  SELECT sh.status 
  FROM "StatusHistory" sh 
  WHERE sh.entity_type = 'order' 
    AND sh.entity_id = "Order".order_id 
  ORDER BY sh.updated_at DESC 
  LIMIT 1
)
WHERE current_status IS NULL OR current_status = 'pending';

-- Update Delivery current_status if needed
-- Note: Most deliveries should already have current_status from our previous enhancement

-- Step 8: Optional - Drop the old OrderStatusHistory table after verification
-- Uncomment the following lines only after verifying that the migration was successful
-- and all applications are using the new StatusHistory table

-- DROP TABLE IF EXISTS "OrderStatusHistory";

-- Step 9: Optional - Drop the old DeliveryStatusTracker table if it was created
-- Uncomment the following line only if the DeliveryStatusTracker table exists and is no longer needed

-- DROP TABLE IF EXISTS "DeliveryStatusTracker";

-- Verification queries - run these to verify the migration
-- SELECT 'OrderStatusHistory records migrated:' as message, COUNT(*) as count 
-- FROM "StatusHistory" WHERE entity_type = 'order';

-- SELECT 'Total StatusHistory records:' as message, COUNT(*) as count 
-- FROM "StatusHistory";

-- SELECT 'Orders with current_status:' as message, COUNT(*) as count 
-- FROM "Order" WHERE current_status IS NOT NULL;

-- SELECT 'Deliveries with current_status:' as message, COUNT(*) as count 
-- FROM "Delivery" WHERE current_status IS NOT NULL;
