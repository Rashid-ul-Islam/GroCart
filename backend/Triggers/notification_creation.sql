CREATE TABLE "Notification" (
  "notification_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "user_id" int NOT NULL,
  "notification_type" varchar(50) NOT NULL, -- 'order_status', 'delivery_update', 'promotion', 'return_update', 'wallet', 'system'
  "title" varchar(255) NOT NULL,
  "message" text NOT NULL,
  "reference_type" varchar(20), -- 'order', 'delivery', 'return_request', 'coupon', 'wallet_transaction'
  "reference_id" int, -- ID of the referenced entity
  "priority" varchar(10) DEFAULT 'medium', -- 'low', 'medium', 'high', 'urgent'
  "is_read" boolean DEFAULT false,
  "is_pushed" boolean DEFAULT false, -- for push notification tracking
  "push_sent_at" timestamp,
  "read_at" timestamp,
  "expires_at" timestamp, -- for temporary notifications like promotions
  "created_at" timestamp DEFAULT (now()),
  "updated_at" timestamp DEFAULT (now()),
  
  -- Constraints
  CONSTRAINT check_valid_notification_type CHECK (
    notification_type IN ('order_status', 'delivery_update', 'promotion', 'return_update', 'wallet', 'system', 'review_reminder', 'stock_alert', 'tier_update')
  ),
  CONSTRAINT check_valid_priority CHECK (
    priority IN ('low', 'medium', 'high', 'urgent')
  )
);

-- Create indexes for efficient querying
CREATE INDEX idx_notification_user_id ON "Notification" ("user_id");
CREATE INDEX idx_notification_user_unread ON "Notification" ("user_id", "is_read") WHERE "is_read" = false;
CREATE INDEX idx_notification_created_at ON "Notification" ("created_at" DESC);
CREATE INDEX idx_notification_type_reference ON "Notification" ("reference_type", "reference_id");
CREATE INDEX idx_notification_expires_at ON "Notification" ("expires_at") WHERE "expires_at" IS NOT NULL;
CREATE INDEX idx_notification_priority_unread ON "Notification" ("priority", "is_read") WHERE "is_read" = false;

-- Create composite index for efficient pagination and filtering
CREATE INDEX idx_notification_user_created_read ON "Notification" ("user_id", "created_at" DESC, "is_read");

-- Add foreign key constraint
ALTER TABLE "Notification" ADD FOREIGN KEY ("user_id") REFERENCES "User" ("user_id") ON DELETE CASCADE;