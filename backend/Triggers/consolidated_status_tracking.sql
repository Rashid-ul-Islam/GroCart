-- CONSOLIDATED STATUS TRACKING SOLUTION
-- This replaces both OrderStatusHistory and DeliveryStatusTracker with a unified approach

-- Option 1: Create a unified StatusHistory table that can handle any entity
CREATE TABLE "StatusHistory" (
  "status_history_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "entity_type" varchar NOT NULL, -- 'order' or 'delivery'
  "entity_id" int NOT NULL,
  "status" varchar NOT NULL,
  "updated_at" timestamp DEFAULT (now()),
  "updated_by" int,
  "notes" text,
  INDEX ("entity_type", "entity_id", "updated_at")
);

-- Add foreign key constraint for updated_by
ALTER TABLE "StatusHistory" ADD FOREIGN KEY ("updated_by") REFERENCES "User" ("user_id");

-- Keep the existing WarehouseProductRequest table as it serves a different purpose
-- (This is from our previous enhancement)
CREATE TABLE "WarehouseProductRequest" (
  "request_id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "delivery_id" int NOT NULL,
  "requesting_warehouse_id" int NOT NULL,
  "target_warehouse_id" int NOT NULL,
  "product_id" int NOT NULL,
  "requested_quantity" int NOT NULL,
  "status" varchar DEFAULT 'pending',
  "requested_at" timestamp DEFAULT (now()),
  "fulfilled_at" timestamp,
  "notes" text
);

-- Add foreign key constraints for warehouse product request
ALTER TABLE "WarehouseProductRequest" ADD FOREIGN KEY ("delivery_id") REFERENCES "Delivery" ("delivery_id");
ALTER TABLE "WarehouseProductRequest" ADD FOREIGN KEY ("requesting_warehouse_id") REFERENCES "Warehouse" ("warehouse_id");
ALTER TABLE "WarehouseProductRequest" ADD FOREIGN KEY ("target_warehouse_id") REFERENCES "Warehouse" ("warehouse_id");
ALTER TABLE "WarehouseProductRequest" ADD FOREIGN KEY ("product_id") REFERENCES "Product" ("product_id");

-- Update Order table to add current status if not exists
-- ALTER TABLE "Order" ADD COLUMN "current_status" varchar DEFAULT 'pending';

-- Update Delivery table to add current status if not exists
-- ALTER TABLE "Delivery" ADD COLUMN "current_status" varchar DEFAULT 'assigned';

-- Add indexes for better performance
CREATE INDEX ON "StatusHistory" ("entity_type", "entity_id", "updated_at");
CREATE INDEX ON "WarehouseProductRequest" ("delivery_id", "status");

-- Migration script to move existing OrderStatusHistory data to StatusHistory
-- INSERT INTO "StatusHistory" (entity_type, entity_id, status, updated_at, updated_by)
-- SELECT 'order', order_id, status, updated_at, updated_by 
-- FROM "OrderStatusHistory";

-- Note: After migration, you can drop the old OrderStatusHistory table
-- DROP TABLE "OrderStatusHistory";
